В этом уроке мы реализуем интерактивную демонстрацию с помощью JavaScript, которая рисует фрактал Мандельброта и позволяет пользователю перемещать и масштабировать рисунок. Будем рисовать попиксельно, без использования обычных примитивов, таких как прямоугольники, окружности и т.п.

Для каждого пикселя на экране нам нужно сделать повторные вычисления, чтобы определить, принадлежит ли значение множеству Мандельброта или нет. Основываясь на том, сколько итераций необходимо, мы можем определить цвет. Некоторые вычисления могут занять бесконечное количество времени, поэтому мы должны ограничить число итераций, разрешенных для каждого пикселя. Давайте назовем этот предел <em>maxiterations.</em> Если мы допустим большее число итераций, наши изображения будут иметь больше деталей, но время, необходимое для вычисления изображения, также будет выше. В любом случае нам придется пойти на компромисс.

Первая часть метода рисования фрактала Мандельброта на холсте (canvas - далее как холст). Мы получаем холст и создаем объект <em>ImageData</em>. Это позволяет нам рисовать пиксели на холсте. Для каждого пикселя на нашем холсте мы применяем функцию итерации и определяем параметр <em>maxiterations</em>. Функция <strong>iterate </strong>вычисляет и рисует соответствующий цвет для объекта <strong>ImageData</strong>, который будет нарисован на холсте.

<code lang="javascript">
    // Метод document.getElementById() возвращает ссылку на элемент, который имеет атрибут id с указанным значением.
    var canvas = document.getElementById("idcanvas");
    //Метод HTMLCanvasElement.getContext() возвращает контекст рисования на холсте
    var context = canvas.getContext("2d");
    
    // Ширина и высота рисунка
    var imgWidth = canvas.width;
    var imgHeight = canvas.height;
    
    // Метод createImageData() создает новый, пустой объект ImageData. Пиксели нового объекта по умолчанию имеют значение прозрачного черного цвета.
    var imagedata = context.createImageData(imgWidth, imgHeight);

   // Максимальное число итераций на пиксель
    var maxiterations = 200;

   // (...)

   // Генерируем фрактал
    function generateImage() {
        // Итерации попиксельно
        for (var y=0; y<imgHeight; y++) {
            for (var x=0; x<imgWidth; x++) {
                iterate(x, y, maxiterations);
            }
        }
    }
</code>

Функция <strong>iterate</strong> реализует алгоритм <a href="https://en.wikipedia.org/wiki/Mandelbrot_set#Escape_time_algorithm" title="Escape time" target="_blank">Escape time</a> для построения фрактала. Он повторяется до тех пор, пока не будут достигнуты максимальные значения или пока не будет выполнено определенное условие выхода. Результат этого процесса дает нам количество итераций, которые были достигнуты. Это число является целым числом между 0 и <em>maxiterations</em>. Если число итераций равно <em>maxiterations</em>, мы рисуем черный пиксель. Если число итераций меньше, чем <em>maxiterations</em>, мы рисуем цвет из указанной палитры. Более точным представлением фрактала было бы изображение в оттенках серого, но красочное изображение лучше смотреть.

Вот функция <strong>iterate</strong>. Количество итераций вычисляется для указанного пикселя. Число преобразуется в цветовое значение из предварительно сгенерированной палитры. Наконец, значение цвета пикселя копируется в массив пикселей объекта <em>ImageData</em>.

<code lang="javascript">
    // Параметры панорамирования и масштабирования
    var offsetx = -imagew/2;
    var offsety = -imageh/2;
    var panx = -100;
    var pany = 0;
    var zoom = 150;
 
    // (..)

    // Вычисляем цвет определенного пикселя
    function iterate(x, y, maxiterations) {
        // Преобразование координаты экрана в фрактальную координату
        var x0 = (x + offsetx + panx) / zoom;
        var y0 = (y + offsety + pany) / zoom;
        
        // Переменные итерации
        var a = 0;
        var b = 0;
        var rx = 0;
        var ry = 0;
        
        // Итерации
        var iterations = 0;
        while (iterations < maxiterations && (rx * rx + ry * ry <= 4)) {
            rx = a * a - b * b + x0;
            ry = 2 * a * b + y0;
            
            // Следующая итерация
            a = rx;
            b = ry;
            iterations++;
        }
        
        // Получаем цвет палитры на основе количества итераций
        var color;
        if (iterations == maxiterations) {
            color = { r:0, g:0, b:0}; // Черный цвет
        } else {
            var index = Math.floor((iterations / (maxiterations-1)) * 255);
            color = palette[index];
        }
        
        // Применяем цвет
        var pixelindex = (y * imgWidth + x) * 4;
        imagedata.data[pixelindex] = color.r;
        imagedata.data[pixelindex+1] = color.g;
        imagedata.data[pixelindex+2] = color.b;
        imagedata.data[pixelindex+3] = 255;
    }
</code>

Генерация палитры
Палитра, которую мы генерируем, представляет собой массив из 256 цветов. Я решил сделать палитру с красными и желтыми цветами, но вы можете выбрать любые цвета, которые вы хотите. Мы начинаем с более темного красного цвета и увеличиваем значения цвета, чтобы создать градиент. Ниже вы можете увидеть изображение палитры.
<img src="http://grafika.me/files/les_screens/vasilchenko_fractal_img_02.png" width="512" height="512" alt="" title="" />

    // Палитра. Массив из 256 цветов
    var palette = [];
 
    // (...)

    // Палитра
    function generatePalette() {
        // Вычисляем градиент
        var roffset = 24;
        var goffset = 16;
        var boffset = 0;
        for (var i=0; i<256; i++) {
            palette[i] = { r:roffset, g:goffset, b:boffset};
            
            if (i < 64) {
                roffset += 3;
            } else if (i<128) {
                goffset += 3;
            } else if (i<192) {
                boffset += 3;
            }
        }
    }

Полный исходный код доступен ниже.